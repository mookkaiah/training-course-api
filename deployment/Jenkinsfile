#!/usr/bin/env groovy

def version
def serviceName
def tempVar 

pipeline {
    agent any 
	environment {
		dotnet = 'C:\\Program Files (x86)\\dotnet\\'
	}
	
    stages {
	stage('Initialize') {
		steps {
			script {

				echo 'Dev-branch- Jenkinsfile - triggered by web hooks' 
				version = "${env.GIT_COMMIT[0..6]}-${env.BUILD_NUMBER}"
				serviceName = env.GIT_URL.replaceFirst(/^.*\/([^\/]+?).git$/, '$1')
				echo 'version : ' + version
				echo 'serviceName : ' + serviceName
			}
		}
	}
		
	stage('Checkout'){
		steps {
			script {
				echo 'URL : ' +  env.GIT_URL
				echo 'branch : ' +  env.GIT_BRANCH.toLowerCase()
				git credentialsId: 'checkoutuser', url: env.GIT_URL, branch: env.GIT_BRANCH.toLowerCase()
				echo env.GIT_BRANCH.toLowerCase() + ' : Dev-branch- successfully checked out'
			}
		}
	}
	    
	// stage('Restore packages'){
    //         steps{
	// 	script {
	// 		bat "dotnet restore CourseApi.csproj"
	// 		echo 'Dev-branch- successfully restored' 
	// 		}
	// 	}
	// }
		
	// stage('Clean'){
    //         steps{
	// 	script {
	// 		bat "dotnet clean CourseApi.csproj"
	// 		echo 'Dev-branch- successfully get cleaned' 
	// 		}
	// 	}
	// }
	
	stage('Build'){
            steps{
				script {
					restore_clean_build('CourseApi')
					echo env.GIT_BRANCH.toLowerCase() + '-branch- successfully built' 
				}
			}
		}
    }
}

def restore_clean_build(String project){
	echo "dotnet publish ${project}.csproj -c Release -o ${env.WORKSPACE}/${project}-build"

	echo "${env.WORKSPACE}/deployment/${project}/"
	echo "${env.WORKSPACE}/${project}-build"

	powershell """
		dotnet restore ${project}.csproj
	"""
	echo env.GIT_BRANCH.toLowerCase() + '-branch- successfully get restored' 

	powershell """
		dotnet clean ${project}.csproj
	"""
	echo env.GIT_BRANCH.toLowerCase() + '-branch- successfully get cleaned'
	
	powershell """
		dotnet publish ${project}.csproj -c Release -o ${env.WORKSPACE}/${project}-build
		cp ${env.WORKSPACE}/deployment/${project}/* ${env.WORKSPACE}/${project}-build
		mkdir ${env.WORKSPACE}/${project}-build/lib
		
		tar -vczf C:/JenkinsAgent/dotnet/build-output/${project}-${BUILD_NUMBER}.tar.gz -c ${env.WORKSPACE}/${project}-build/
		
	"""
}